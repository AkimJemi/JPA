Java Persistence API(JPA)는 자바 애플리케이션에서 객체 지향 프로그래밍을 통해 관계형 데이터베이스를 쉽게 다룰 수 있게 해주는 표준 인터페이스입니다. JPA는 객체와 관계형 데이터베이스의 매핑을 처리하며, ORM(Object-Relational Mapping) 기술을 통해 자바 객체를 데이터베이스 테이블에 매핑하여 데이터 접근을 단순화합니다.

JPA의 주요 기능을 정리하면 다음과 같습니다:

### 1. ORM (Object-Relational Mapping)
- JPA는 자바 객체를 데이터베이스의 테이블에 매핑하고, 객체의 필드를 데이터베이스의 컬럼에 매핑합니다. 이를 통해 객체 지향 언어인 자바로 데이터베이스 조작이 가능합니다.
- 매핑을 위해 주로 애노테이션(`@Entity`, `@Table`, `@Column` 등)을 사용합니다.

### 2. CRUD (Create, Read, Update, Delete) 기능
- JPA는 기본적으로 CRUD 기능을 제공합니다. 데이터베이스에 엔터티를 생성, 조회, 수정, 삭제하는 작업을 쉽게 할 수 있습니다.
- 예를 들어, `EntityManager` 또는 `Repository`를 통해 데이터베이스 조작을 수행할 수 있습니다.

### 3. JPQL (Java Persistence Query Language)
- JPA는 JPQL이라는 객체 지향 쿼리 언어를 제공합니다. 이는 SQL과 비슷하지만, 데이터베이스 테이블이 아닌 엔터티 객체를 대상으로 쿼리를 작성합니다.
- JPQL을 사용하여 복잡한 조회 작업을 수행할 수 있으며, 정적 쿼리와 동적 쿼리 작성이 가능합니다.

### 4. 관계 매핑 (Association Mapping)
- JPA는 엔터티 간의 관계를 매핑할 수 있는 기능을 제공합니다.
- 여러 가지 관계를 매핑할 수 있습니다:
  - **1:1 관계**: `@OneToOne` 애노테이션을 사용합니다.
  - **1:N 관계**: `@OneToMany` 애노테이션을 사용합니다.
  - **N:1 관계**: `@ManyToOne` 애노테이션을 사용합니다.
  - **N:N 관계**: `@ManyToMany` 애노테이션을 사용합니다.
- 관계 매핑 시, `cascade`, `fetch`, `mappedBy` 등의 속성을 설정하여 관계의 특성과 로딩 전략을 정의할 수 있습니다.

### 5. 캐시 (Cache)
- JPA는 1차 캐시와 2차 캐시를 통해 성능을 최적화할 수 있습니다.
  - **1차 캐시**: `EntityManager` 단위로 관리되는 캐시로, 동일한 트랜잭션 내에서 동일한 엔터티를 조회하면 데이터베이스에 재접근하지 않고 1차 캐시에서 반환합니다.
  - **2차 캐시**: 애플리케이션 전체에서 공유되는 캐시로, 이를 활용하면 데이터베이스 접근 횟수를 줄여 성능을 향상시킬 수 있습니다.

### 6. 트랜잭션 관리
- JPA는 트랜잭션을 통해 데이터의 일관성을 보장합니다.
- `EntityManager`의 `begin`, `commit`, `rollback` 메서드를 사용하여 트랜잭션을 명시적으로 관리하거나, Spring 프레임워크의 `@Transactional` 애노테이션을 이용해 트랜잭션 관리를 선언적으로 설정할 수 있습니다.

### 7. 데이터베이스 변경 감지 (Dirty Checking)
- JPA는 엔터티의 변경 사항을 자동으로 감지하여, 트랜잭션이 커밋될 때 변경된 데이터를 자동으로 데이터베이스에 반영합니다. 이를 "Dirty Checking"이라고 합니다.

### 8. 영속성 컨텍스트 (Persistence Context)
- 영속성 컨텍스트는 JPA가 관리하는 엔터티의 집합입니다. `EntityManager`를 통해 엔터티를 영속성 컨텍스트에 저장하면, JPA가 이를 관리하고 데이터베이스와의 동기화를 처리합니다.
- 영속성 컨텍스트는 엔터티를 1차 캐시로 관리하고, 변경 감지, 지연 로딩 등 JPA의 여러 기능을 제공합니다.

### 9. 지연 로딩(Lazy Loading)과 즉시 로딩(Eager Loading)
- JPA는 엔터티의 연관된 데이터를 가져올 때, 필요한 시점까지 데이터를 가져오지 않는 "지연 로딩"과, 연관된 데이터를 즉시 가져오는 "즉시 로딩"을 지원합니다.
- `@ManyToOne`, `@OneToMany` 등의 관계 애노테이션에서 `fetch` 속성을 설정하여 로딩 전략을 결정할 수 있습니다.

### 10. Cascade (연관 엔터티에 대한 전파)
- JPA는 부모 엔터티의 작업(CREATE, UPDATE, DELETE 등)이 연관된 자식 엔터티에도 전파되도록 설정할 수 있습니다.
- 예를 들어, `CascadeType.PERSIST`를 사용하면 부모 엔터티를 저장할 때 자식 엔터티도 함께 저장됩니다.

### 11. Auditing (감사 기능)
- JPA는 엔터티의 생성 시간, 수정 시간 등을 자동으로 기록할 수 있는 기능을 제공합니다.
- Spring Data JPA에서는 `@CreatedDate`, `@LastModifiedDate`, `@CreatedBy`, `@LastModifiedBy` 같은 애노테이션을 이용해 쉽게 감사 기능을 구현할 수 있습니다.

JPA는 이러한 다양한 기능을 통해 객체 지향적인 방식으로 데이터베이스를 조작할 수 있도록 도와줍니다. ORM의 복잡성을 줄이고, 코드의 유지 보수성과 생산성을 높여주는 강력한 도구입니다.